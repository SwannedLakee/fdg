</td></tr>

    <!--    <tfoot>
            <tr>
            <th>Sutta</th>
            <th>St</th>
            <th>Title</th>
            <th>Words</th>
            <th>Ct</th>
            <th>Mr</th>
            <th>Links</th>
            <th class="none">Quote</th>
            </tr>
        </tfoot> -->

      </tbody>

    </table>

        </div>

<script type="text/javascript" src="/assets/js/typeahead/bootstrap3-typeahead.min.js"></script>
    <script type='text/javascript'>
   $(document).ready(function() {
       // Регистрируем собственный тип сортировки для чекбоксов
    $.fn.dataTable.ext.order['dom-checkbox'] = function(settings, col) {
        return this.api().column(col, { order: 'index' }).nodes().map(function(td, i) {
            return $('input', td).prop('checked') ? '1' : '0';
        });
    };
   
   var dataSrc = [];
   var filterValue = new URLSearchParams(window.location.search).get('f');

$(document).ready(function() {
    // Загрузка файла с данными
    $.ajax({
        url: '/assets/js/textinfo.js',
        dataType: 'json',
        success: function(TextInfo) {
            // Заполнение данных в таблице
$('#pali').find('tbody').find('tr').each(function() {
    var linkText = $(this).find('td').eq(0).find('a').text();
    if (TextInfo[linkText]) {
        var titlePali = TextInfo[linkText]['pi'] || ''; // Если нет значения, присваиваем пустую строку
        var titleEnglish = TextInfo[linkText]['en'] || ''; // Если нет значения, присваиваем пустую строку
        var metaphorCount = TextInfo[linkText]['mtph'] || ''; // Если нет значения, присваиваем пустую строку
        $(this).find('td').eq(1).html('<strong class="pli-lang inputscript-ISOPali">' + titlePali + '</strong> ' + titleEnglish);
        $(this).find('td').eq(4).text(metaphorCount);
    } else {
        // Если данных для linkText нет, можно установить пустые значения или другое поведение по умолчанию
        $(this).find('td').eq(1).html('');
        $(this).find('td').eq(4).text('');
    }
});
            
   	 var table = $('#pali').DataTable({
	 /*  'autoWidth': true,*/
	   'stateSave': true,
  stateSaveParams: function(settings, data) {
    data.search.search = ''; 
  },
	     dom: '<"row"lf>r<t><"row"ip><""Q><"footerlike"B>',
        buttons: {
          name: 'primary',
        buttons: [
            {
              text: 'Main',
              className: 'btn btn-link ',
                  action: function ( dt ) {
                                window.location.href = "/new";
                            }
            },
              {
              text: 'Read',
              className: 'btn btn-link ',
                  action: function ( dt ) {
                                window.location.href = "/sc";
                            }
            },
                        {
              text: 'Sutta Diff',
               className: 'btn btn-link ',
                  action: function ( dt ) {
                                window.location.href = '/assets/diff';
                            }
                        },  
                        {
              text: 'History',
              className: 'btn btn-link ',
                  action: function ( dt ) {
                                window.location.href = '/history.php';
                            }
                        },  
                        {text: 'Words', className: 'btn btn-link ', action: function ( dt ) {window.location.href = 'WORDREPLACELINK';}},
                        { extend: 'colvis', 
                     className: 'btn btn-link ',
                        text: 'Visibility' }
        ]
    },
      "search": {
    "caseInsensitive": true,
        "smart": true
  },
	   'paging'  : true,
	    'colReorder': true,
	    'orderMulti': true,
	   'pageLength' : 10,
	   'lengthMenu' : [10, 30, 50, 100, 1000],
        "order": [[6, 'asc'], [0, 'asc']],
	/*  'responsive': true,*/
	  'columnDefs': [
		/*		{                
				targets: [8], // Индекс столбца с чекбоксами
				orderDataType: 'dom-checkbox' // Используем функцию сортировки
				},
				*/
	            { type: "html", target: [1,2,7] },
	            { type: 'natural', targets: 0 },
				  {
            target: 6,
            visible: true
        }				
					],
      'initComplete': function(){
         var api = this.api();
         
         
             // Handle click on "Expand All" button
    $('#btn-show-all-children').on('click', function(){
        // Expand row details
        table.rows(':not(.parent)').nodes().to$().find('td:first-child').trigger('click');
    });
    // Handle click on "Collapse All" button
    $('#btn-hide-all-children').on('click', function(){
        // Collapse row details
        table.rows('.parent').nodes().to$().find('td:first-child').trigger('click');
    });
         

         // Populate a dataset for autocomplete functionality
		          api.cells('tr', [0, 2, 3, 4, 5]).every(function(){
            //var data = this.data().replace( /(<([^>]+)>)/ig, '');
            var data = $('<div>').html(this.data()).text();
          //  console.log(data);
            if(dataSrc.indexOf(data) === -1){ dataSrc.push(data); }
         });

         // Initialize Typeahead plug-in
         $('.dataTables_filter input[type="search"]', api.table().container())
            .typeahead({
              autoSelect: false,
               source: dataSrc,
               afterSelect: function(value){
                  api.search(value).draw();
               }
            }
         );
      } // автозаполнение какоето
      

   });	//конец datatable	         
   
      //предустановка фильтра из get param ?f=
     if (filterValue) {
        table.search(filterValue).draw();
        var currentUrl = new URL(window.location.href);
        currentUrl.searchParams.delete('f');
        history.replaceState({}, '', currentUrl);
}
  // s param и div keywprd
   
let params = new URLSearchParams(document.location.search);
let finder = params.get("s");
let keyword;

// Проверяем наличие элемента с классом "keyword"
let keywordElement = document.querySelector('.keyword');
if (keywordElement) {
    keyword = keywordElement.textContent.trim();
} else {
    keyword = ""; // Значение по умолчанию, если элемент не найден
}

// Используем значение из параметра "s" или "keyword"
//let searchValue = finder && finder.trim() !== "" ? finder : keyword;
let searchValue = finder && finder.trim() !== "" ? finder : keyword.replace(/\\b/g, '');
if (searchValue !== "") {
    // Получаем таблицу DataTables по ее id

    // Получаем все строки таблицы
    table.rows().every(function(rowIdx, tableLoop, rowLoop) {
        // Получаем данные в текущей строке
        var rowData = this.data();

        // Проходим по каждому элементу данных в строке
        rowData.forEach(function(cellData, index) {
            if (index !== 0) {
                // Применяем регулярное выражение к содержимому ячейки и подсвечиваем совпадения
                var regex = new RegExp(searchValue + '(?![^<]*>)', 'gi');
                // var regex = new RegExp(finder, 'gi'); // 'gi' - игнорировать регистр
                cellData = cellData.replace(regex, function(match) {
                    return '<b class="match finder">' + match + '</b>';
                });

                // Обновляем содержимое ячейки с примененной подсветкой
                table.cell(rowIdx, index).data(cellData);
            }
        });
    });

    // Перерисовываем таблицу для применения изменений
    table.draw(false);
}



//конец s и keyword            
        },
        error: function(xhr, status, error) {
            console.error('Ошибка при загрузке файла с данными:', status, error);
        }
    });
});

	
  

   
   //highlight pattern
   

});


  </script>
  

  <script>
    // Заполнение данных в таблице
  
</script>
  
  
  <script>

$(document).ready(function() {
    // Получаем параметр поиска из URL

});
  </script>
  
<script>
// Получение всех чекбоксов
var checkboxes = document.querySelectorAll('input[type="checkbox"]');

// Функция для сохранения состояния чекбоксов в LocalStorage
function saveCheckboxesStateToLocalStorage(urlKey) {
  var checkboxState = {};
  checkboxes.forEach(function(checkbox, index) {
    checkboxState['checkbox_' + checkbox.dataset.index] = checkbox.checked;
  });
  localStorage.setItem(urlKey, JSON.stringify(checkboxState));
}

// Функция для восстановления состояния чекбоксов из LocalStorage
function restoreCheckboxesStateFromLocalStorage(urlKey) {
  var checkboxState = JSON.parse(localStorage.getItem(urlKey));
  if (checkboxState) {
    checkboxes.forEach(function(checkbox) {
      var index = checkbox.dataset.index;
      checkbox.checked = checkboxState['checkbox_' + index] || false;
    });
  }
}

// Получение части URL, которую будем использовать как ключ для LocalStorage
var currentURL = window.location.href;
var urlKey = currentURL.substring(currentURL.lastIndexOf('/') + 1);

// Вызов функции восстановления состояния чекбоксов при загрузке страницы
document.addEventListener('DOMContentLoaded', function() {
  restoreCheckboxesStateFromLocalStorage(urlKey);
});

// Вызов функции сохранения состояния чекбоксов при изменении их значения
checkboxes.forEach(function(checkbox) {
  checkbox.addEventListener('change', function() {
    saveCheckboxesStateToLocalStorage(urlKey);
  });
});

</script>
        <script src="/assets/js/openFdg.js"></script>
<script src="/assets/js/themeswitch.js"></script>
	  <script src="/assets/js/smoothScroll.js"defer></script>
    <script defer type="module" src="/assets/js/langswitch.js"></script>     <script src="/assets/js/linksdpr.js"></script>
        <script src="/assets/js/openDpr.js"></script>
                <script src="/assets/js/linksru.js"></script>
        <script src="/assets/js/openRu.js"></script>
        <script src="/assets/js/linksbw.js"></script>
                <script src="/assets/js/openBw.js"></script>
</body>
</html>


