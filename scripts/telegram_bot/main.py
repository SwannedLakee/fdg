import json
import os
import logging
from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    InlineQueryHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
try:
    with open("config.json", "r") as config_file:
        config = json.load(config_file)
        TOKEN = config.get("TOKEN", "")
        if not TOKEN:
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    raise

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è ===
def load_words():
    try:
        path = os.path.join("assets", "sutta_words.txt")
        with open(path, "r", encoding="utf-8") as f:
            words = [line.strip() for line in f if line.strip()]
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞")
            return words
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        return []
 
WORDS = load_words()

# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ===
def normalize(text: str) -> str:
    return (
        text.lower()
        .replace("·πÅ", "m")
        .replace("·πÉ", "m")
        .replace("·π≠", "t")
        .replace("·∏ç", "d")
        .replace("·πá", "n")
        .replace("·πÖ", "n")
        .replace("√±", "n")
        .replace("ƒÅ", "a")
        .replace("ƒ´", "i")
        .replace("≈´", "u")
    )

# === –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç ===
def autocomplete(prefix: str, max_results: int = 28) -> list[str]:
    try:
        prefix_n = normalize(prefix)
        suggestions = [
            word for word in WORDS if normalize(word).startswith(prefix_n)
        ][:max_results]
        logger.debug(f"–ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è '{prefix}': –Ω–∞–π–¥–µ–Ω–æ {len(suggestions)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return suggestions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞: {e}")
        return []

# === –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
def create_keyboard(query: str, lang: str = "ru", is_inline: bool = False) -> InlineKeyboardMarkup:
    base = "https://dhamma.gift"
    search_url = f"{base}/{'' if lang == 'en' else 'ru/'}?p=-kn&q={query.replace(' ', '+')}"
    dict_url = f"https://dict.dhamma.gift/{'' if lang == 'en' else 'ru/'}/search_html?q={query.replace(' ', '+')}"

    label_dict = "üìò Dictionary" if lang == "en" else "üìò –°–ª–æ–≤–∞—Ä—å"
    label_site = "üîç Dhamma.gift" if lang == "en" else "üîç Dhamma.gift"
    toggle_label = "EN" if lang == "ru" else "RU"

    callback_prefix = "inline_" if is_inline else ""

    keyboard = [
        [  # –ü–µ—Ä–≤—ã–π —Ä—è–¥: —è–∑—ã–∫ + —Å–ª–æ–≤–∞—Ä—å
            InlineKeyboardButton(text=toggle_label, callback_data=f"{callback_prefix}toggle_lang:{lang}:{query}"),
            InlineKeyboardButton(text=label_dict, url=dict_url),
        ],
        [  # –í—Ç–æ—Ä–æ–π —Ä—è–¥: dhamma.gift
            InlineKeyboardButton(text=label_site, url=search_url),
        ]
    ]

    return InlineKeyboardMarkup(keyboard)

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ ===
def format_message_with_links(text: str, query: str, lang: str = "ru") -> str:
    base = "https://dhamma.gift"
    search_url = f"{base}/{'' if lang == 'en' else 'ru/'}?p=-kn&q={query.replace(' ', '+')}"
    dict_url = f"https://dict.dhamma.gift/{'' if lang == 'en' else 'ru/'}/search_html?q={query.replace(' ', '+')}"

    label_dict = "üìò Dictionary" if lang == "en" else "üìò –°–ª–æ–≤–∞—Ä—å"
    label_site = "üîç Dhamma.gift" if lang == "en" else "üîç Dhamma.gift"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    links_text = (
        f'<a href="{search_url}">{label_site}</a> | '
        f'<a href="{dict_url}">{label_dict}</a>'
    )
    return f"{text}\n\n{links_text}"

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.id} ({user.full_name})")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'sn12.2' –∏–ª–∏ 'dukkha')\n"
        "‚Ä¢ –î–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: @dhammagift_bot —Å–ª–æ–≤–æ"
    )

# === –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º ===
async def inline_query(update: Update, context: CallbackContext):
    query = update.inline_query.query.strip()
    if not query or len(query) < 2:
        return

    logger.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: '{query}' –æ—Ç {update.inline_query.from_user.id}")
    lang = context.user_data.get("lang", "ru")
    suggestions = autocomplete(query, max_results=28)

    results = []
    for idx, word in enumerate(suggestions):
        message_text = format_message_with_links(word, word, lang=lang)
        results.append(
            InlineQueryResultArticle(
                id=f"{word}_{idx}",
                title=word,
                input_message_content=InputTextMessageContent(
                    message_text,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                ),
                description=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '{word}'",
                reply_markup=create_keyboard(word, lang=lang, is_inline=True)
            )
        )

    if not results:
        return

    await update.inline_query.answer(results, cache_time=10)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    user = update.effective_user
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {text}")

    # –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤
    if len(text) < 5 and text.isalpha():
        suggestions = autocomplete(text)
        if suggestions:
            reply = "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(f"- {w}" for w in suggestions)
            await update.message.reply_text(reply)
            return

    # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    lang = context.user_data.get("lang", "ru")
    message_text = format_message_with_links(text, text, lang=lang)
    keyboard = create_keyboard(text, lang=lang)
    
    await update.message.reply_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ ===
async def toggle_language(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = query.data.split(':')
        is_inline = parts[0] == 'inline_toggle_lang'
        current_lang = parts[1]
        search_query = ':'.join(parts[2:])  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ query —Å–æ–¥–µ—Ä–∂–∏—Ç ':'
        
        new_lang = 'en' if current_lang == 'ru' else 'ru'
        context.user_data["lang"] = new_lang  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        message_text = format_message_with_links(search_query, search_query, lang=new_lang)
        
        if is_inline:
            # –í –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await query.edit_message_text(
                text=message_text,
                reply_markup=create_keyboard(search_query, lang=new_lang, is_inline=True),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        else:
            # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=message_text,
                reply_markup=create_keyboard(search_query, lang=new_lang),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            
    except Exception as e:
        logger.error(f"Error in toggle_language: {e}")
        if query.message:
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        app = Application.builder().token(TOKEN).build()

        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))

        # –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
        app.add_handler(InlineQueryHandler(inline_query))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ (–¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
        app.add_handler(CallbackQueryHandler(toggle_language, pattern=r"^toggle_lang:"))
        app.add_handler(CallbackQueryHandler(toggle_language, pattern=r"^inline_toggle_lang:"))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()