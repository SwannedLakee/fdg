import json
import os
import logging
from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    InlineQueryHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext,
)

WELCOME_MESSAGES = {
    "en": (
        "‚ú® Welcome to Dhamma Gift Bot!\n\n"
        "‚ùì <b>How to use:</b>\n\n"
        "üí¨ <b>Call me in any chat or group:</b>\n"
        " ‚å®Ô∏è Type <code>@dhammagift_bot</code> and start typing a word to search or sutta reference (e.g. <code>sn12.2</code>)\n\n"
        "üí° Suggestions will appear for Pali words and sutta references\n\n"
        "ü§ì You can use Velthuis transliteration for diacritics: <code>.t .d .n ~n aa ii uu</code> ‚Üí <code>·π≠ ·∏ç ·πá √± ƒÅ ƒ´ ≈´</code>\n\n"
        "üí¨ <b>In this private chat:</b>\n"
        "Simply send me a word or reference (e.g. <code>mn10</code> or <code>saariputta</code>)"
    ),
    "ru": (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dhamma Gift Bot!\n\n"
        "üîç <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n\n"
        "üí¨ <b>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—è –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ:</b>\n"
        "‚å®Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ <code>@dhammagift_bot</code> –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—É—Ç—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>sn12.2</code>)\n"
        "üí° –Ø –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—É—Ç—Ç—ã\n\n"
        "ü§ì –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é Velthuis –¥–ª—è –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏: <code>.t .d .n ~n aa ii uu</code> ‚Üí <code>·π≠ ·∏ç ·πá √± ƒÅ ƒ´ ≈´</code>\n\n"
        "üí¨ <b>–í —ç—Ç–æ–º –ª–∏—á–Ω–æ–º —á–∞—Ç–µ:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—É—Ç—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>mn10</code> –∏–ª–∏ <code>saariputta</code>)"
    )
}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
USER_DATA_FILE = "user_data.json"
DEFAULT_LANG = "en"  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º ===
def load_user_data() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(USER_DATA_FILE):
        return {}
    
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_data: {e}")
        return {}

def save_user_data(user_id: int, key: str, value: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
    try:
        data = load_user_data()
        user_id_str = str(user_id)
        
        if user_id_str not in data:
            data[user_id_str] = {}
        
        data[user_id_str][key] = value
        
        with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

def get_user_lang(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = load_user_data()
    return data.get(str(user_id), {}).get("lang", DEFAULT_LANG)

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è ===
def load_words():
    try:
        path = os.path.join("assets", "sutta_words.txt")
        with open(path, "r", encoding="utf-8") as f:
            words = [line.strip() for line in f if line.strip()]
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞")
            return words
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        return []
 
WORDS = load_words()

def normalize(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–º–µ–Ω"""
    if not text:
        return text
    
    text = text.lower()
    replacements = [
        ("aa", "a"), ("ii", "i"), ("uu", "u"),
        ('"n', "n"), ("~n", "n"),
        (".t", "t"), (".d", "d"), (".n", "n"),
        (".m", "m"), (".l", "l"), (".h", "h")
    ]
    for pattern, repl in replacements:
        text = text.replace(pattern, repl)
    
    return (
        text.replace("·πÅ", "m").replace("·πÉ", "m")
        .replace("·π≠", "t").replace("·∏ç", "d")
        .replace("·πá", "n").replace("·πÖ", "n")
        .replace("√±", "n").replace("ƒÅ", "a")
        .replace("ƒ´", "i").replace("≈´", "u")
        .replace(".", " ")
    )

def autocomplete(prefix: str, max_results: int = 29) -> list[str]:
    try:
        prefix_n = normalize(prefix)
        suggestions = [
            word for word in WORDS 
            if normalize(word).startswith(prefix_n)
        ][:max_results]
        logger.debug(f"–ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è '{prefix}': –Ω–∞–π–¥–µ–Ω–æ {len(suggestions)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return suggestions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞: {e}")
        return []

# === –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
def create_keyboard(query: str, lang: str = "en", is_inline: bool = False) -> InlineKeyboardMarkup:
    base = "https://dhamma.gift"
    search_url = f"{base}/{'' if lang == 'en' else 'ru/'}?p=-kn&q={query.replace(' ', '+')}"
    dict_url = f"https://dict.dhamma.gift/{'' if lang == 'en' else 'ru/'}search_html?q={query.replace(' ', '+')}"

    label_dict = "üìò Dictionary" if lang == "en" else "üìò –°–ª–æ–≤–∞—Ä—å"
    label_site = "üîé Dhamma.gift En" if lang == "en" else "üîé Dhamma.gift Ru"
    toggle_label = "RU" if lang == "en" else "EN"  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ DEFAULT_LANG=en

    callback_prefix = "inline_" if is_inline else ""

    keyboard = [
        [
            InlineKeyboardButton(text=toggle_label, callback_data=f"{callback_prefix}toggle_lang:{lang}:{query}"),
            InlineKeyboardButton(text=label_dict, url=dict_url),
        ],
        [
            InlineKeyboardButton(text=label_site, url=search_url),
        ]
    ]

    return InlineKeyboardMarkup(keyboard)

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ ===
def format_message_with_links(text: str, query: str, lang: str = "en") -> str:
    base = "https://dhamma.gift"
    search_url = f"{base}/{'' if lang == 'en' else 'ru/'}?p=-kn&q={query.replace(' ', '+')}"
    dict_url = f"https://dict.dhamma.gift/{'' if lang == 'en' else 'ru/'}search_html?q={query.replace(' ', '+')}"

    label_dict = "üìò Dictionary" if lang == "en" else "üìò –°–ª–æ–≤–∞—Ä—å"
    label_site = "üîé Dhamma.gift" if lang == "en" else "üîé Dhamma.gift"

    links_text = (
        f'<a href="{search_url}">{label_site}</a> | '
        f'<a href="{dict_url}">{label_dict}</a>'
    )
    return f"\n{text}\n\n{links_text}"

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.id} ({user.full_name})")

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_lang = get_user_lang(user.id) or 'en'
    context.user_data["lang"] = user_lang

    keyboard = [
        [
            InlineKeyboardButton("English", callback_data="lang_set:en"),
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_set:ru")
        ]
    ]

    await update.message.reply_text(
        WELCOME_MESSAGES[user_lang],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    
async def handle_language_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected_lang = query.data.split(':')[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    save_user_data(user_id, 'lang', selected_lang)
    context.user_data['lang'] = selected_lang

    keyboard = [
        [
            InlineKeyboardButton("English", callback_data="lang_set:en"),
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_set:ru")
        ]
    ]

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
    await query.edit_message_text(
        text=WELCOME_MESSAGES[selected_lang],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

def uniCoder(text):
    if not text:
        return text
    replacements = [
        ("aa", "ƒÅ"), ("ii", "ƒ´"), ("uu", "≈´"),
        ('"n', "·πÖ"), ("~n", "√±"),
        (".t", "·π≠"), (".d", "·∏ç"), (".n", "·πá"),
        (".m", "·πÉ"), (".l", "·∏∑"), (".h", "·∏•")
    ]
    for pattern, repl in replacements:
        text = text.replace(pattern, repl)
    return text

# === –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º ===
async def inline_query(update: Update, context: CallbackContext):
    query = update.inline_query.query.strip()
    if not query:
        return

    user_id = update.inline_query.from_user.id
    logger.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: '{query}' –æ—Ç {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = get_user_lang(user_id)
    if not lang:
        lang = DEFAULT_LANG
        save_user_data(user_id, "lang", lang)
    
    context.user_data["lang"] = lang
    
    suggestions = autocomplete(query, max_results=29)
    results = []
    converted_text = uniCoder(query)
    
    if converted_text:
        results.append(InlineQueryResultArticle(
            id="user_input",
            title=f"‚úèÔ∏è Send: {converted_text}" if lang == "en" else f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å: {converted_text}",
            input_message_content=InputTextMessageContent(
                format_message_with_links(converted_text, converted_text, lang=lang),
                parse_mode="HTML",
                disable_web_page_preview=True
            ),
            description="Your text with converted symbols" if lang == "en" else "–í–∞—à —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
            reply_markup=create_keyboard(converted_text, lang=lang, is_inline=True)
        ))

    for idx, word in enumerate(suggestions[:29]):
        results.append(InlineQueryResultArticle(
            id=f"dict_{idx}",
            title=word,
            input_message_content=InputTextMessageContent(
                format_message_with_links(word, word, lang=lang),
                parse_mode="HTML",
                disable_web_page_preview=True
            ),
            description=f"Click to send '{word}'",
            reply_markup=create_keyboard(word, lang=lang, is_inline=True)
        ))

    await update.inline_query.answer(results, cache_time=10)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None ===
async def handle_message(update: Update, context: CallbackContext):
    try:
        if not update.message or not update.message.text:
            logger.warning("Received update without message or text")
            return
            
        text = update.message.text.strip()
        user = update.effective_user
        logger.info(f"Message from {user.id}: {text}")

        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
        lang = get_user_lang(user.id) or DEFAULT_LANG
        
        converted_text = uniCoder(text)
        
        if converted_text == text and len(text) < 5 and text.isalpha():
            suggestions = autocomplete(text)
            if suggestions:
                reply = {
                    "en": "Possible variants:\n" + "\n".join(f"- {w}" for w in suggestions),
                    "ru": "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(f"- {w}" for w in suggestions)
                }[lang]
                await update.message.reply_text(reply)
                return

        message_text = format_message_with_links(converted_text, converted_text, lang=lang)
        keyboard = create_keyboard(converted_text, lang=lang)
        
        await update.message.reply_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ ===
async def toggle_language(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    try:
        user = query.from_user
        user_id = user.id
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –±–µ–∑–æ–ø–∞—Å–Ω–æ
        try:
            parts = query.data.split(':')
            if len(parts) < 3:
                raise ValueError("Invalid callback_data format")
            
            is_inline = parts[0] == 'inline_toggle_lang'
            current_lang = parts[1]
            search_query = ':'.join(parts[2:])[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        except Exception as e:
            logger.error(f"Invalid callback_data: {query.data} | Error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫
        new_lang = 'ru' if current_lang == 'en' else 'en'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
        context.user_data["lang"] = new_lang
        save_user_data(user_id, "lang", new_lang)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message_text = format_message_with_links(search_query, search_query, lang=new_lang)
            reply_markup = create_keyboard(search_query, lang=new_lang, is_inline=is_inline)
            
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.info(f"User {user_id} switched language to {new_lang}")
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

    except Exception as e:
        logger.error(f"Unexpected error in toggle_language: {e}")
        try:
            await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        except:
            pass



# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    logger.info("Starting bot...")
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.json
        try:
            with open("config.json", "r") as config_file:
                config = json.load(config_file)
                TOKEN = config.get("TOKEN", "")
                if not TOKEN:
                    raise ValueError("Token not found in config.json")
        except Exception as e:
            logger.error(f"Config load error: {e}")
            raise

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É assets –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs("assets", exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        app = Application.builder().token(TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(handle_language_selection, pattern="^lang_set:"))
        app.add_handler(InlineQueryHandler(inline_query))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(CallbackQueryHandler(toggle_language, pattern=r"^toggle_lang:"))
        app.add_handler(CallbackQueryHandler(toggle_language, pattern=r"^inline_toggle_lang:"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–ª–æ–≤–∞—Ä—è
        if not os.path.exists(os.path.join("assets", "sutta_words.txt")):
            logger.warning("Sutta words file not found! Autocomplete will not work")

        logger.info("Bot is running and ready to handle updates")
        app.run_polling()

    except Exception as e:
        logger.critical(f"Bot failed to start: {e}")
        raise

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    required_files = ["config.json"]
    for file in required_files:
        if not os.path.exists(file):
            logger.error(f"Critical file missing: {file}")
            exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Fatal error: {e}")