import json
import os
import logging
from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    InlineQueryHandler,
    filters,
    CallbackContext,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
try:
    with open("config.json", "r") as config_file:
        config = json.load(config_file)
        TOKEN = config.get("TOKEN", "")
        if not TOKEN:
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    raise

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è ===
def load_words():
    try:
        path = os.path.join("assets", "sutta_words.txt")
        with open(path, "r", encoding="utf-8") as f:
            words = [line.strip() for line in f if line.strip()]
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞")
            return words
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        return []

WORDS = load_words()

# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ===
def normalize(text: str) -> str:
    return (
        text.lower()
        .replace("·πÅ", "m")
        .replace("·πÉ", "m")
        .replace("·π≠", "t")
        .replace("·∏ç", "d")
        .replace("·πá", "n")
        .replace("√±", "n")
        .replace("ƒÅ", "a")
        .replace("ƒ´", "i")
        .replace("≈´", "u")
    )

# === –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç ===
def autocomplete(prefix: str, max_results: int = 28) -> list[str]:
    try:
        prefix_n = normalize(prefix)
        suggestions = [
            word for word in WORDS if normalize(word).startswith(prefix_n)
        ][:max_results]
        logger.debug(f"–ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è '{prefix}': –Ω–∞–π–¥–µ–Ω–æ {len(suggestions)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return suggestions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞: {e}")
        return []

# === –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
def create_keyboard(query: str) -> InlineKeyboardMarkup:
    search_url = f"https://dhamma.gift/ru/?p=-kn&q={query.replace(' ', '+')}"
    dict_url = f"https://dpdict.net/ru/search_html?q={query.replace(' ', '+')}"
    
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å", url=search_url),
            InlineKeyboardButton(text="üìö –°–ª–æ–≤–∞—Ä—å", url=dict_url)
        ]
    ])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.id} ({user.full_name})")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'sn12.2' –∏–ª–∏ '–º–µ—Ç—Ç–∞')\n"
        "‚Ä¢ /find - –ø–æ–∏—Å–∫ —Å—É—Ç—Ç\n"
        "‚Ä¢ /read - —á—Ç–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        "‚Ä¢ /dict - –ø–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ\n"
        "‚Ä¢ –î–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: @dhammagift_bot —Å–ª–æ–≤–æ"
    )

async def find(update: Update, context: CallbackContext):
    query = " ".join(context.args) if context.args else ""
    logger.info(f"–ü–æ–∏—Å–∫: {query} –æ—Ç {update.effective_user.id}")
    if not query:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /find sn12.2 –∏–ª–∏ /find dukkhasamudayo")
        return
    
    keyboard = create_keyboard(query)
    await update.message.reply_text(
        f"üîç –ü–æ–∏—Å–∫: {query}",
        reply_markup=keyboard
    )

async def read(update: Update, context: CallbackContext):
    query = " ".join(context.args) if context.args else ""
    logger.info(f"–ß—Ç–µ–Ω–∏–µ: {query} –æ—Ç {update.effective_user.id}")
    if not query:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /read sn12.2")
        return
    
    keyboard = create_keyboard(query)
    await update.message.reply_text(
        f"üìñ –ß—Ç–µ–Ω–∏–µ: {query}",
        reply_markup=keyboard
    )

async def dict_search(update: Update, context: CallbackContext):
    query = " ".join(context.args) if context.args else ""
    logger.info(f"–°–ª–æ–≤–∞—Ä—å: {query} –æ—Ç {update.effective_user.id}")
    if not query:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /dict metta –∏–ª–∏ /dict –ª—é–±–æ–≤—å")
        return
    
    keyboard = create_keyboard(query)
    await update.message.reply_text(
        f"üìö –°–ª–æ–≤–∞—Ä—å: {query}",
        reply_markup=keyboard
    )

# === –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º ===
async def inline_query(update: Update, context: CallbackContext):
    query = update.inline_query.query.strip()
    if not query or len(query) < 2:
        return

    logger.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: '{query}' –æ—Ç {update.inline_query.from_user.id}")
    suggestions = autocomplete(query, max_results=8)

    results = []
    for word in suggestions:
        keyboard = create_keyboard(word)
        
        results.append(
            InlineQueryResultArticle(
                id=word,
                title=word,
                input_message_content=InputTextMessageContent(word),
                description=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '{word}'",
                reply_markup=keyboard
            )
        )

    await update.inline_query.answer(results, cache_time=10)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    user = update.effective_user
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {text}")

    # –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤
    if len(text) < 5 and text.isalpha():
        suggestions = autocomplete(text)
        if suggestions:
            reply = "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(f"- {w}" for w in suggestions)
            await update.message.reply_text(reply)
            return

    # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = create_keyboard(text)
    await update.message.reply_text(
        text,
        reply_markup=keyboard
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        app = Application.builder().token(TOKEN).build()

        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("find", find))
        app.add_handler(CommandHandler("read", read))
        app.add_handler(CommandHandler("dict", dict_search))

        # –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
        app.add_handler(InlineQueryHandler(inline_query))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()